<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crystal.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Crystal.EntityFrameworkCore.IBaseRepository`1">
            <summary>
            Base repository interface to perform dB operations
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.IBaseRepository`1.Entity">
            <summary>
            Database entity
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IQueryable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
             Returns IQueryable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped to</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>Maps the data to TModel and return IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            </summary>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            Maps the response to TModel
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return true/false if the record exists based on filter
            </summary>
            <param name="filter">Where expression based on filter</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.FindAsync(System.Object)">
            <summary>
            Finds and returns the entity based on primary key of the table
            </summary>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.FindAsync``1(System.Object)">
            <summary>
            Finds and returns the mapped model based on primary key of the table
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.InsertAsync(`0)">
            <summary>
            Inserts a record to the database
            </summary>
            <param name="entity">entity to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple records to the database
            </summary>
            <param name="entities">List of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(System.Object)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="id">Primary identifier of the entity</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(`0)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="entity">entity to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAllAsync">
            <summary>
            Deletes all the records from the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.UpdateAsync(`0)">
            <summary>
            Updates the entity to the database
            </summary>
            <param name="entity">Record to the updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes the record from the context
            </summary>
            <param name="filter">filter to select records to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates list of records in the database
            </summary>
            <param name="entities">list of entities to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.RunSql(System.String,System.Object[])">
            <summary>
            Executes raw sql query on the context
            </summary>
            <param name="sql">sql statement to be executed</param>
            <param name="parameters">parameters to be injected in the sql query</param>
            <returns>IQueryable of TEntity</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.BulkDeleteAllAsync">
            <summary>
            Deletes all records from the table
            <remarks>This method will commit the changes to the database</remarks>
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk inserts the records to the database
            </summary>
            <param name="entities">list of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.IBaseUowRepository">
            <summary>
            Base unit of work repository interface
            </summary>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.IBaseUowRepository.DbContext">
            <summary>
            DbContext instance
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.CommitAsync">
            <summary>
            Commiting pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.BeginTransactionAsync">
            <summary>
            Begin a new transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.RollbackAsync">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.CommitBulkChangesAsync">
            <summary>
            Commit bulk changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.Repository``1">
            <summary>
            Returns the base repository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseContext">
            <summary>
            Base context derived from DbContext
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.#ctor">
            <summary>
            Default base context constructor 
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Default base context constructor with DbContextOptions
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseContext.ContextBuilder">
            <summary>
            Context builder
            </summary>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseContext.Transaction">
            <summary>
            Database transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.BeginTransaction">
            <summary>
            Starts a new transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.SaveChanges">
            <summary>
            Saves uncommitted changes to the database
            </summary>
            <returns>The number of records added/updated</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Commit">
            <summary>
            Commits pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitAsync">
            <summary>
            Commits pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitBulkChanges">
            <summary>
            Commits pending bulk changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitBulkChangesAsync">
            <summary>
            Commits pending bulk changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Rollback">
            <summary>
            Rollback any pending changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.RollbackAsync">
            <summary>
            Rollback any pending changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Dispose">
            <summary>
            Dispose transaction and dBContext
            </summary>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseRepository`1">
            <summary>
            Base repository to perform dB operations
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseRepository`1.Entity">
            <summary>
            Database entity
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,AutoMapper.IMapper)">
            <summary>
            Base repository constructor
            </summary>
            <param name="context">Database context</param>
            <param name="mapper">Auto-mapper configuration</param>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IQueryable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
             Returns IQueryable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped to</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>Maps the data to TModel and return IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            </summary>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            Maps the response to TModel
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return true/false if the record exists based on filter
            </summary>
            <param name="filter">Where expression based on filter</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.FindAsync(System.Object)">
            <summary>
            Finds and returns the entity based on primary key of the table
            </summary>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.FindAsync``1(System.Object)">
            <summary>
            Finds and returns the mapped model based on primary key of the table
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.InsertAsync(`0)">
            <summary>
            Inserts a record to the database
            </summary>
            <param name="entity">entity to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple records to the database
            </summary>
            <param name="entities">List of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk inserts the records to the database
            </summary>
            <param name="entities">list of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(System.Object)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="id">Primary identifier of the entity</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(`0)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="entity">entity to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.BulkDeleteAllAsync">
            <summary>
            Deletes all records from the table
            <remarks>This method will commit the changes to the database</remarks>
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAllAsync">
            <summary>
            Deletes all the records from the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.UpdateAsync(`0)">
            <summary>
            Updates the entity to the database
            </summary>
            <param name="entity">Record to the updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes the record from the context
            </summary>
            <param name="filter">filter to select records to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.Dispose">
            <summary>
            Disposes the dBContext
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates list of records in the database
            </summary>
            <param name="entities">list of entities to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.RunSql(System.String,System.Object[])">
            <summary>
            Executes raw sql query on the context
            </summary>
            <param name="sql">sql statement to be executed</param>
            <param name="parameters">parameters to be injected in the sql query</param>
            <returns>IQueryable of TEntity</returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseUowRepository">
            <summary>
            Base unit of work repository providing functionality to perform database operations
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.#ctor(Crystal.EntityFrameworkCore.BaseContext,AutoMapper.IMapper)">
            <summary>
            Base unit of work constructor
            </summary>
            <param name="context"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Repository``1">
            <summary>
            Returns IBaseRepository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseUowRepository.DbContext">
            <summary>
            Database context instance
            </summary>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseUowRepository.Mapper">
            <summary>
            Auto-mapper
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.BeginTransactionAsync">
            <summary>
            Starts a transaction which can be used across multiple data change requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Commit">
            <summary>
            Commit changes to database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitAsync">
            <summary>
            Commit changes to database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitBulkChangesAsync">
            <summary>
            Commit bulk changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitBulkChanges">
            <summary>
            Commit bulk changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Rollback">
            <summary>
            Rollback any uncommitted changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.RollbackAsync">
            <summary>
            Rollback any uncommitted changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Dispose">
            <summary>
            Dispose dB context and repository instances
            </summary>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.UowServiceCollectionExtension">
            <summary>
            Service collection extension to configure unit of work with entity framework core
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.UowServiceCollectionExtension.ConfigureUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures unit of work repositories in the service collection to support the implementation
            Make sure that the dB context is registered before registering unit of work repositories
            </summary>
            <typeparam name="TContext">Derived class of BaseContext</typeparam>
            <param name="serviceCollection">Service collection</param>
            <returns></returns>
        </member>
    </members>
</doc>
