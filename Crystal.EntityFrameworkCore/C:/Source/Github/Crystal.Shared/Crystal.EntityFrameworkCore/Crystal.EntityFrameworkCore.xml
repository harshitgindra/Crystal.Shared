<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crystal.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Crystal.EntityFrameworkCore.IBaseRepository`1">
            <summary>
            Base repository interface to perform dB operations
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.IBaseRepository`1.Entity">
            <summary>
            Database entity
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IQueryable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
             Returns IQueryable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped to</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>Maps the data to TModel and return IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            </summary>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            Maps the response to TModel
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return true/false if the record exists based on filter
            </summary>
            <param name="filter">Where expression based on filter</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.FindAsync(System.Object)">
            <summary>
            Finds and returns the entity based on primary key of the table
            </summary>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.FindAsync``1(System.Object)">
            <summary>
            Finds and returns the mapped model based on primary key of the table
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.InsertAsync(`0)">
            <summary>
            Inserts a record to the database
            </summary>
            <param name="entity">entity to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple records to the database
            </summary>
            <param name="entities">List of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(System.Object)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="id">Primary identifier of the entity</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(`0)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="entity">entity to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAllAsync">
            <summary>
            Deletes all the records from the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.UpdateAsync(`0)">
            <summary>
            Updates the entity to the database
            </summary>
            <param name="entity">Record to the updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes the record from the context
            </summary>
            <param name="filter">filter to select records to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates list of records in the database
            </summary>
            <param name="entities">list of entities to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.BulkDeleteAllAsync">
            <summary>
            Deletes all records from the table
            <remarks>This method will commit the changes to the database</remarks>
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseRepository`1.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk inserts the records to the database
            </summary>
            <param name="entities">list of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.IBaseUowRepository">
            <summary>
            Base unit of work repository interface
            </summary>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.IBaseUowRepository.DbContext">
            <summary>
            DbContext instance
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.CommitAsync">
            <summary>
            Commiting pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.BeginTransactionAsync">
            <summary>
            Begin a new transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.RollbackAsync">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.CommitBulkChangesAsync">
            <summary>
            Commit bulk changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.Repository``1">
            <summary>
            Returns the base repository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.IBaseUowRepository.Repository``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns IBaseRepository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseContext">
            <summary>
            Base context derived from DbContext
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.#ctor">
            <summary>
            Default base context constructor 
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Default base context constructor with DbContextOptions
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseContext.ContextBuilder">
            <summary>
            Context builder
            </summary>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseContext.Transaction">
            <summary>
            Database transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.BeginTransaction">
            <summary>
            Starts a new transaction
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.SaveChanges">
            <summary>
            Saves uncommitted changes to the database
            </summary>
            <returns>The number of records added/updated</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Commit">
            <summary>
            Commits pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitAsync">
            <summary>
            Commits pending changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitBulkChanges">
            <summary>
            Commits pending bulk changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.CommitBulkChangesAsync">
            <summary>
            Commits pending bulk changes to the database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Rollback">
            <summary>
            Rollback any pending changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.RollbackAsync">
            <summary>
            Rollback any pending changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseContext.Dispose">
            <summary>
            Dispose transaction and dBContext
            </summary>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseRepository`1">
            <summary>
            Base repository to perform dB operations
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseRepository`1.Entity">
            <summary>
            Database entity
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext,AutoMapper.IMapper)">
            <summary>
            Base repository constructor
            </summary>
            <param name="context">Database context</param>
            <param name="mapper">Auto-mapper configuration</param>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IEnumerable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IEnumerable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Returns IQueryable of data based on filters
            </summary>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
             Returns IQueryable of data based on filters
            </summary>
            <typeparam name="TModel">Model to which result should be mapped to</typeparam>
            <param name="filter">Where expression to filer the data</param>
            <param name="orderBy">Specifies the sorting of data</param>
            <param name="includes">Specify additional columns/tables that should be include in the response</param>
            <returns>Maps the data to TModel and return IQueryable of data</returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            </summary>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.GetFirstOrDefaultAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets first or default record based on filter
            Maps the response to TModel
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="filter">Where expression to filter the data</param>
            <param name="includes">Properties to be included in the response</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Return true/false if the record exists based on filter
            </summary>
            <param name="filter">Where expression based on filter</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.FindAsync(System.Object)">
            <summary>
            Finds and returns the entity based on primary key of the table
            </summary>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.FindAsync``1(System.Object)">
            <summary>
            Finds and returns the mapped model based on primary key of the table
            </summary>
            <typeparam name="TModel">Model to which the response should be mapped to</typeparam>
            <param name="id">primary key of the table</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.InsertAsync(`0)">
            <summary>
            Inserts a record to the database
            </summary>
            <param name="entity">entity to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple records to the database
            </summary>
            <param name="entities">List of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk inserts the records to the database
            </summary>
            <param name="entities">list of entities to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(System.Object)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="id">Primary identifier of the entity</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(`0)">
            <summary>
            Deletes the record from the database
            </summary>
            <param name="entity">entity to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.BulkDeleteAllAsync">
            <summary>
            Deletes all records from the table
            <remarks>This method will commit the changes to the database</remarks>
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAllAsync">
            <summary>
            Deletes all the records from the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.UpdateAsync(`0)">
            <summary>
            Updates the entity to the database
            </summary>
            <param name="entity">Record to the updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes the record from the context
            </summary>
            <param name="filter">filter to select records to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.Dispose">
            <summary>
            Disposes the dBContext
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates list of records in the database
            </summary>
            <param name="entities">list of entities to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseRepository`1.RunSql(System.String,System.Object[])">
            <summary>
            Executes raw sql query on the context
            </summary>
            <param name="sql">sql statement to be executed</param>
            <param name="parameters">parameters to be injected in the sql query</param>
            <returns>IQueryable of TEntity</returns>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.BaseUowRepository">
            <summary>
            Base unit of work repository providing functionality to perform database operations
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.#ctor(Crystal.EntityFrameworkCore.BaseContext,AutoMapper.IMapper)">
            <summary>
            Base unit of work constructor
            </summary>
            <param name="context"></param>
            <param name="mapper"></param>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Repository``1">
            <summary>
            Returns IBaseRepository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Repository``1(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Returns IBaseRepository instance of the entity
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Crystal.EntityFrameworkCore.BaseUowRepository.DbContext">
            <summary>
            Database context instance
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.BeginTransactionAsync">
            <summary>
            Starts a transaction which can be used across multiple data change requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Commit">
            <summary>
            Commit changes to database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitAsync">
            <summary>
            Commit changes to database
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitBulkChangesAsync">
            <summary>
            Commit bulk changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.CommitBulkChanges">
            <summary>
            Commit bulk changes
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Rollback">
            <summary>
            Rollback any uncommitted changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.RollbackAsync">
            <summary>
            Rollback any uncommitted changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.BaseUowRepository.Dispose">
            <summary>
            Dispose dB context and repository instances
            </summary>
        </member>
        <member name="T:Crystal.EntityFrameworkCore.UowServiceCollectionExtension">
            <summary>
            Service collection extension to configure unit of work with entity framework core
            </summary>
        </member>
        <member name="M:Crystal.EntityFrameworkCore.UowServiceCollectionExtension.ConfigureUnitOfWork``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures unit of work repositories in the service collection to support the implementation
            Make sure that the dB context is registered before registering unit of work repositories
            </summary>
            <typeparam name="TContext">Derived class of BaseContext</typeparam>
            <param name="serviceCollection">Service collection</param>
            <returns></returns>
        </member>
        <member name="T:Crystal.Shared.DatatableDecorator">
            <summary>
            Datatable decorator with extension methods
            </summary>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.ToDatatableAsync``1(System.Linq.IQueryable{``0},Crystal.Shared.DataTableRequest{``0})">
            <summary>
            Performs datatable operations on the result based on input
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query">Collection of data</param>
            <param name="request">Datatable request</param>
            <returns>Datatable response</returns>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.ToDatatable``1(System.Linq.IQueryable{``0},Crystal.Shared.DataTableRequest{``0})">
            <summary>
            Performs datatable operations on the result based on input
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query">Collection of data</param>
            <param name="request">Datatable request</param>
            <returns>Datatable response</returns>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.OrderBy``1(System.Linq.IQueryable{``0},Crystal.Shared.DataTableRequest{``0})">
            <summary>
            Perform order by operation with datatable request
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.GlobalFilter``1(System.Linq.IQueryable{``0},Crystal.Shared.DataTableRequest{``0})">
            <summary>
            Perform global filter on all searchable columns
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.ColumnFilter``1(System.Linq.IQueryable{``0},Crystal.Shared.DataTableRequest{``0})">
            <summary>
            Perform column level filtering based on datatable request
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.DatatableDecorator.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Get properties from the Entity including nested properties
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Crystal.Shared.DisposableDecorator">
            <summary>
            Disposable decorator
            </summary>
        </member>
        <member name="M:Crystal.Shared.DisposableDecorator.TryDispose(System.Object)">
            <summary>
            This method will try to dispose the object if it implements IDisposable
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Crystal.Shared.ListDecorator">
            <summary>
            List extensions
            </summary>
        </member>
        <member name="M:Crystal.Shared.ListDecorator.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return true if records is null oe empty
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.ListDecorator.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pick a random record from the records
            </summary>
            <typeparam name="T"></typeparam>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.ListDecorator.PickRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pick a random list of record from the records
            </summary>
            <typeparam name="T"></typeparam>
            <param name="records"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Crystal.Shared.ListDecorator.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffle the records randomly
            </summary>
            <typeparam name="T"></typeparam>
            <param name="records"></param>
            <returns></returns>
        </member>
        <member name="T:Crystal.Shared.StringDecorator">
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:Crystal.Shared.StringDecorator.IsNullEmptyWhiteSpace(System.String)">
            <summary>
            Returns true if string is null, empty or empty space
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Crystal.Shared.DataTableRequest`1">
            <summary>
            Datatable request
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.Shared.DataTableRequest`1.Start">
            <summary>
                Paging first record indicator. This is the start point in the current data set
                (0 index based - i.e. 0 is the first record)
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableRequest`1.Length">
            <summary>
                Number of records that the table can display in the current draw. It is expected
                that the number of records returned will be equal to this number, unless the
                server has fewer records to return. Note that this can be -1 to indicate that
                all records should be returned (although that negates any benefits of
                server-side processing!)
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableRequest`1.Search">
            <summary>
                Global Search for the table
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableRequest`1.Order">
            <summary>
                Collection of all column indexes and their sort directions
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableRequest`1.Columns">
            <summary>
                Collection of all columns in the table
            </summary>
        </member>
        <member name="T:Crystal.Shared.Column">
            <summary>
            Datatable column
            </summary>
        </member>
        <member name="P:Crystal.Shared.Column.Data">
            <summary>
                Column's data source
            </summary>
        </member>
        <member name="P:Crystal.Shared.Column.Name">
            <summary>
                Column's name
            </summary>
        </member>
        <member name="P:Crystal.Shared.Column.Searchable">
            <summary>
                Flag to indicate if this column is searchable (true) or not (false)
            </summary>
        </member>
        <member name="P:Crystal.Shared.Column.Orderable">
            <summary>
                Flag to indicate if this column is orderable (true) or not (false)
            </summary>
        </member>
        <member name="P:Crystal.Shared.Column.Search">
            <summary>
                Search to apply to this specific column.
            </summary>
        </member>
        <member name="T:Crystal.Shared.Search">
            <summary>
            Datatable search/filter
            </summary>
        </member>
        <member name="P:Crystal.Shared.Search.Value">
            <summary>
                Global search value. To be applied to all columns which have searchable as true
            </summary>
        </member>
        <member name="P:Crystal.Shared.Search.Regex">
            <summary>
                true if the global filter should be treated as a regular expression for advanced
                searching, false otherwise. Note that normally server-side processing scripts
                will not perform regular expression searching for performance reasons on large
                data sets, but it is technically possible and at the discretion of your script
            </summary>
        </member>
        <member name="P:Crystal.Shared.Search.ExactMatch">
            <summary>
            Specifies if the filter needs to be an exact match
            </summary>
        </member>
        <member name="T:Crystal.Shared.Order">
            <summary>
            Datatable ordering
            </summary>
        </member>
        <member name="P:Crystal.Shared.Order.Column">
            <summary>
                Column to which ordering should be applied. This is an index reference to the
                columns array of information that is also submitted to the server
            </summary>
        </member>
        <member name="P:Crystal.Shared.Order.Dir">
            <summary>
                Ordering direction for this column. It will be asc or desc to indicate ascending
                ordering or descending ordering, respectively
            </summary>
        </member>
        <member name="T:Crystal.Shared.DataTableResponse`1">
            <summary>
            Datatable response
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.TotalRecords">
            <summary>
            Total records, before filtering (i.e. the total number of records in the database)
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.RecordsFiltered">
            <summary>
            Total records, after filtering (i.e. the total number of records after filtering has been applied -
            not just the number of records being returned for this page of data).
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.Data">
            <summary>
            The data to be displayed in the table. This is an array of data source objects, one for each row, which will be used by DataTables.
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.TotalDisplayRecords">
            <summary>
            Total records, before filtering (i.e. the total number of records in the database)
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.Echo">
            <summary>
            Echo
            </summary>
        </member>
        <member name="P:Crystal.Shared.DataTableResponse`1.Error">
            <summary>
            f an error occurs during the running of the server-side processing script, 
            you can inform the user of this error by passing back the error message to be displayed using this parameter. 
            </summary>
        </member>
    </members>
</doc>
